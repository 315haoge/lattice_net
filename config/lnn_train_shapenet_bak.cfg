// paths: {
//     data_path: "/media/rosu/Data/data"
// }

train: {
    dataset_name: "shapenet" //semantickitti, shapenet, toyexample
    // dataset_name: "toyexample" //semantickitti, shapenet, toyexample
    with_viewer: true
    with_debug_output: false
    with_error_checking: false
    batch_size: 1
    lr: 0.4 
    base_lr:0.001  // works well for adam with reduceonplateu and with the coarsening which doest the concatenation (if we do concatenation we have to reduce learning rate)
    // base_lr:0.001  // for sgd
    weight_decay: 1e-4
    // weight_decay: 0.0
    nr_epochs_per_half_cycle: 200 //for cyclic learning a half_cycle is the process of going from base_lr to max_lr or viceverse. This is how many epochs it takes to do a half_cycle Leslie paper recomend a value between 2 and 10. For PolyScheduler this is the maximum amount of epochs we train
    exponential_gamma: 0.97
    max_training_epochs: -1

    save_checkpoint: true
    checkpoint_path: "/media/rosu/Data/data/shapenet_part_seg/saved_models/cap2"
}

model: {
    positions_mode: "xyz"
    values_mode: "none"
    pointnet_start_nr_channels: 32
    nr_downsamples: 3
    nr_blocks_down_stage: [4,4,4]
    nr_blocks_bottleneck: 3
    nr_blocks_up_stage: [2,2,2]
    nr_levels_down_with_normal_resnet: 3
    nr_levels_up_with_normal_resnet: 2
    compression_factor: 1.0
    dropout_last_layer: 0.0
}

core: {
    loguru_verbosity: 3
    hidpi: true
    debug_with_profiler: true //makes the profiler print when it starts and stops time
}

lattice_gpu: {
    // hash_table_capacity: 9000000
    // hash_table_capacity: 900000
    // hash_table_capacity: 80000
    // hash_table_capacity: 30000 //good for dog which splats around 20k
    // hash_table_capacity: 40000 //good for color_1
    // hash_table_capacity: 3000 //good for lena which splats around 2k
    // hash_table_capacity: 17000 //good for smenaitc kitti which splat around 10k with sigma of 1
    hash_table_capacity: 6000 //good for shapenet which splat at around 1k for sigma 0.03 
    nr_sigmas: 1

    // sigma_0: "0.06 3"  //for bag IMPORTANT: if you change this, change it also int he lnn_eval.cfg
    sigma_0: "0.05 3"  //for motorbike IMPORTANT: if you change this, change it also int he lnn_eval.cfg
    // sigma_0: "0.04 3"  //for knife IMPORTANT: if you change this, change it also int he lnn_eval.cfg
    // sigma_0: "0.01 2"  // IMPORTANT: if you change this, change it also int he lnn_eval.cfg
}

loader_toy_example: {
    autostart: false
    label_mngr: {
        labels_file: "/media/rosu/Data/data/toy_example/colorscheme_and_labels/labels.txt"
        color_scheme_file: "/media/rosu/Data/data/toy_example/colorscheme_and_labels/color_scheme.txt"
        unlabeled_idx: 0
    }
}

loader_shapenet_partseg: {
    dataset_path: "/media/rosu/Data/data/shapenet_part_seg/shapenet_part_seg/shapenetcore_partanno_segmentation_benchmark_v0"
    // dataset_path: "/home/local/staff/rosu/data/shapenet_part_seg/shapenet_part_seg/shapenetcore_partanno_segmentation_benchmark_v0"
    autostart: false
    mode: "train" // train, test, val
    restrict_to_object: "cap" // you can leave it empty to get all of them or write any of (airplane, bag, cap, car, chair, earphone, guitar, knife, lamp, laptop, motorbike, mug, pistol, rocket, skateboard, table)
    shuffle_points: true
    normalize: false // normalize the point cloud between [-1 and 1]
    shuffle: true
    // do_overfit: true //return only one of the samples the whole time, concretely the first sample in the dataset
    do_overfit: false //return only one of the samples the whole time, concretely the first sample in the dataset

    // label_mngr: {

    //     //motorbike
    //     labels_file: "/media/rosu/Data/data/shapenet_part_seg/motorbike/labels.txt"
    //     color_scheme_file: "/media/rosu/Data/data/shapenet_part_seg/motorbike/color_scheme.txt"
    //     frequency_file: "/media/rosu/Data/data/shapenet_part_seg/motorbike/frequency.txt"

    //     // // knife
    //     // labels_file: "/media/rosu/Data/data/shapenet_part_seg/knife/labels.txt"
    //     // color_scheme_file: "/media/rosu/Data/data/shapenet_part_seg/knife/color_scheme.txt"
    //     // frequency_file: "/media/rosu/Data/data/shapenet_part_seg/knife/frequency.txt"

    //     // // bag
    //     // labels_file: "/media/rosu/Data/data/shapenet_part_seg/bag/labels.txt"
    //     // color_scheme_file: "/media/rosu/Data/data/shapenet_part_seg/bag/color_scheme.txt"
    //     // frequency_file: "/media/rosu/Data/data/shapenet_part_seg/bag/frequency.txt"


    //     unlabeled_idx: 0
    // }

    // one used for actual augmentation
    transformer: {
        random_translation_xyz_magnitude: 0.0
        random_translation_xz_magnitude: 0.2
        rotation_y_max_angle: 0.0
        // random_stretch_xyz_magnitude: 0.2
        random_stretch_xyz_magnitude: 0.0
        adaptive_subsampling_falloff_start: 0.0
        adaptive_subsampling_falloff_end: 0.0
        // random_subsample_percentage: 0.998 //randomly removed x percent of the pointcloud
        random_subsample_percentage: 0.0 //randomly removed x percent of the pointcloud
        random_mirror_x: false
        random_mirror_z: true
        random_rotation_90_degrees_y: false
    }

    // //one with no augmentation
    // transformer: {
    //     random_translation_xyz_magnitude: 0.0
    //     rotation_y_max_angle: 0.0
    //     random_stretch_xyz_magnitude: 0.0
    //     adaptive_subsampling_falloff_start: 0.0
    //     adaptive_subsampling_falloff_end: 0.0
    //     random_subsample_percentage: 0.0 //randomly removed x percent of the pointcloud
    //     random_mirror_x: false
    //     random_mirror_z: false
    // }
}

// visualization: {
//     show_gui: true

//     subsample_factor: 2
//     // tf_worldGL_worldROS_angle: -1.57079632679
//     // tf_worldGL_worldROS_axis: "x"
//     enable_culling: true
//     enable_ssao: false
//     ao_downsample: 1
//     // kernel_radius: 2.5
//     kernel_radius: 5.0
//     ao_power: 3
//     ao_blur_sigma_spacial: 2.0
//     ao_blur_sigma_depth: 0.00001
//     shading_factor: 1.0
//     light_factor: 1.0

//     camera_near: 0.5
//     camera_far: 5000

//     enable_edl_lighting: false
//     edl_strength: 8.0

//     enable_surfel_splatting:false
// }
